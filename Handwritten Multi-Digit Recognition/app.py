# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S3r8xSGtCOXuEi2rrdfFgdvA39Pr6omd
"""

# Import Streamlit for creating the web application UI
import streamlit as st
from streamlit_drawable_canvas import st_canvas
import cv2
from keras.models import load_model
import numpy as np
import warnings
warnings.filterwarnings('ignore')

# Initialize a global list to store predicted digits

dgrs = []

# Initialize a global string to store the prediction result

res = " "

def predict():
    global res
    model = load_model('model.keras')
    image_folder = "./"
    filename = f'img.jpg'
    image = cv2.imread(image_folder + filename, cv2.IMREAD_COLOR)

    if image is None:
        st.error("Error: Image not loaded. Please draw on the canvas first.")
        return

    gray = cv2.cvtColor(image.copy(), cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    th = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
    contours = cv2.findContours(th, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]

    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 1)
        digit = th[y:y + h, x:x + w]
        resized_digit = cv2.resize(digit, (18, 18))
        padded_digit = np.pad(resized_digit, ((5, 5), (5, 5)), "constant", constant_values=0)
        digit = padded_digit.reshape(1, 28, 28, 1)
        digit = digit / 255.0
        pred = model.predict(digit)[0]
        final_pred = np.argmax(pred)
        dgrs.append(int(final_pred))
        res = res + " " + str(final_pred)
        data = str(final_pred) + ' ' + str(int(max(pred) * 100)) + '%'
        font = cv2.FONT_HERSHEY_SIMPLEX
        fontScale = 0.5
        color = (255, 255, 255)
        thickness = 1
        cv2.putText(image, data, (x, y), font, fontScale, color, thickness)

st.title("Drawable Canvas")

st.markdown("""
Draw digits on the canvas, get the image data back into Python!
""")

canvas_result = st_canvas(
    stroke_width=10,
    stroke_color='red',
    height=150
)

if canvas_result.image_data is not None:
    cv2.imwrite(f"img.jpg", canvas_result.image_data)

if st.button("Predict"):
    predict()
    st.write('The predicted digit:', res)

